name: Presubmit Checks
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  title_format:
    name: Check PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Run PR Title Checker
        run: |
          pip install semver GitPython
          python misc/ci_check_pr_title.py "$PR_TITLE"
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}

  check_code_format:
    name: Check Code Format
    runs-on: ubuntu-latest
    # This job will be required to pass before merging to master branch.
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Check code format
        run: |
          git config user.email "taichigardener@gmail.com"
          git config user.name "Taichi Gardener"
          git checkout -b _fake_squash
          git remote add upstream https://github.com/taichi-dev/taichi.git
          git fetch upstream master
          sudo apt install clang-format-10
          python3 -m pip install --user yapf==0.31.0 gitpython colorama isort
          python3 python/taichi/code_format.py
          git checkout -b _enforced_format
          git commit -am "enforce code format" || true
          # exit with 1 if there were differences:
          git diff _fake_squash _enforced_format --exit-code

  build_and_test_cpu_required:
    # This job will be required to pass before merging to master branch.
    name: Required Build and Test (CPU)
    needs: check_code_format
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            python: 3.6
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download Pre-Built LLVM 10.0.0
        run: |
          python misc/ci_download.py
          mkdir taichi-llvm
          cd taichi-llvm
          unzip ../taichi-llvm.zip
        env:
          CI_PLATFORM: ${{ matrix.os }}

      - name: Build & Install
        run: |
          TAICHI_REPO_DIR=`pwd`
          export PATH=$TAICHI_REPO_DIR/taichi-llvm/bin/:$PATH
          export CXX=clang++
          python -m pip install -r requirements_dev.txt
          cd python
          git fetch origin master
          TAICHI_CMAKE_ARGS=$CI_SETUP_CMAKE_ARGS python build.py build
          cd ..
          export NUM_WHL=`ls dist/*.whl | wc -l`
          if [ $NUM_WHL -ne 1 ]; then echo 'ERROR: created more than 1 whl.' && exit 1; fi
          pip install dist/*.whl
        env:
          CI_SETUP_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=ON -DTI_WITH_VULKAN:BOOL=OFF -DTI_BUILD_TESTS:BOOL=ON

      - name: Test
        run: |
          TAICHI_REPO_DIR=`pwd`
          export PATH=$TAICHI_REPO_DIR/taichi-llvm/bin/:$PATH
          # Note we only need this since we cannot write into system python package.
          export PATH=$PATH:$HOME/.local/bin
          hash -r
          python examples/algorithm/laplace.py
          ti diagnose
          ti changelog
          # taichi_cpp_tests requires passing in TI_LIB_DIR manually.
          TI_LIB_DIR=`python -c "import taichi;print(taichi.__path__[0])" | tail -1`
          TI_LIB_DIR="$TI_LIB_DIR/lib" ./build/taichi_cpp_tests
          ti test -vr2 -t2

  build_and_test_cpu:
    name: Build and Test (CPU)
    needs: build_and_test_cpu_required
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: macos-latest
            python: 3.7
            with_cc: OFF
            with_cpp_tests: ON
          - os: ubuntu-latest
            python: 3.9
            with_cc: OFF
            with_cpp_tests: OFF
          - os: ubuntu-latest
            python: 3.8
            with_cc: ON
            with_cpp_tests: OFF
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - name: Download Pre-Built LLVM 10.0.0
        run: |
          python misc/ci_download.py
          mkdir taichi-llvm
          cd taichi-llvm
          unzip ../taichi-llvm.zip
        env:
          CI_PLATFORM: ${{ matrix.os }}

      - name: Build & Install
        run: |
          TAICHI_REPO_DIR=`pwd`
          export PATH=$TAICHI_REPO_DIR/taichi-llvm/bin/:$PATH
          export CXX=clang++
          python -m pip install -r requirements_dev.txt
          cd python
          git fetch origin master
          TAICHI_CMAKE_ARGS=$CI_SETUP_CMAKE_ARGS python build.py build
          cd ..
          NUM_WHL=`ls dist/*.whl | wc -l`
          if [ $NUM_WHL -ne 1 ]; then echo 'ERROR: created more than 1 whl.' && exit 1; fi
          pip install dist/*.whl
        env:
          CI_SETUP_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CC:BOOL=${{ matrix.with_cc }} -DTI_WITH_VULKAN:BOOL=OFF -DTI_BUILD_TESTS:BOOL=${{ matrix.with_cpp_tests }}
      # [DEBUG] Copy this step around to enable debugging inside Github Action instances.
      #- name: Setup tmate session
      #  uses: mxschmitt/action-tmate@v3
      #  with:
      #    limit-access-to-actor: true

      - name: Test
        run: |
          TAICHI_REPO_DIR=`pwd`
          export PATH=$TAICHI_REPO_DIR/taichi-llvm/bin/:$PATH
          export PATH=$PATH:$HOME/.local/bin
          hash -r
          python examples/algorithm/laplace.py
          ti diagnose
          ti changelog
          # taichi_cpp_tests requires passing in TI_LIB_DIR manually.
          TI_LIB_DIR=`python -c "import taichi;print(taichi.__path__[0])" | tail -1`
          [ "$RUN_CPP_TESTS" = "ON" ] && TI_LIB_DIR="$TI_LIB_DIR/lib" ./build/taichi_cpp_tests
          ti test -vr2 -t2
        env:
          RUN_CPP_TESTS: ${{ matrix.with_cpp_tests }}

  build_and_test_m1:
    name: Build and Test (Apple M1)
    needs: check_code_format
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: macos-latest
            python: 3.8
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash --noprofile --norc -eo pipefail {0}"
    runs-on: [self-hosted, m1]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Build
        run: |
          echo 'ENV'
          env
          echo 'SHELL'
          echo $SHELL
          echo 'PATH'
          echo $PATH
          cat ~/.zshrc
          #/Users/github/miniforge3/bin/conda init
          export PATH=$HOME/miniforge3/bin:$PATH
          conda init bash
          conda activate base
          which python
          python3 -m pip uninstall taichi -y
          rm -rf $HOME/Library/Python/3.8/lib/python/site-packages/taichi
          git --version
          export CXX=clang++
          python3 -m pip install -r requirements_dev.txt
          cd python
          git fetch origin master
          TAICHI_CMAKE_ARGS=$CI_SETUP_CMAKE_ARGS python3 build.py build
          cd ..
          export NUM_WHL=`ls dist/*.whl | wc -l`
          if [ $NUM_WHL -ne 1 ]; then echo 'ERROR: created more than 1 whl.' && exit 1; fi
          python3 -m pip install dist/*.whl
        env:
          CI_SETUP_CMAKE_ARGS: -DTI_WITH_OPENGL:BOOL=OFF -DTI_WITH_CUDA:BOOL=OFF -DTI_WITH_CC:BOOL=OFF -DTI_WITH_VULKAN:BOOL=OFF -DTI_BUILD_TESTS:BOOL=ON

      - name: Test
        run: |
          export PATH=$PATH:$HOME/Library/Python/3.8/bin
          python3 examples/algorithm/laplace.py
          TI_LIB_DIR=`python3 -c "import taichi;print(taichi.__path__[0])" | tail -1`
          TI_LIB_DIR="$TI_LIB_DIR/lib" ./build/taichi_cpp_tests
          ti test -vr2 -t4 -x
